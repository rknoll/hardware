group = 'at.rknoll.gradle'
version = '0.1'

if (hasProperty('teamcity')) {
	if (!property('teamcity')['build.number'].startsWith(version + "-")) {
		version += '-' + property('teamcity')['build.number']
		println "##teamcity[buildNumber '" + version + "']"
	} else {
		version = property('teamcity')['build.number']
	}
} else {
	version += '-SNAPSHOT'
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.0"
    }
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'antlr'

dependencies {
	compile gradleApi()
	compile localGroovy()
	compile group: 'org.jgrapht', name: 'jgrapht-core', version: '0.9.0'
	compile group: 'org.jgrapht', name: 'jgrapht-ext', version: '0.9.0'
	compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile group: 'com.intellij', name: 'forms_rt', version: '6.0.5'
    antlr "org.antlr:antlr4:4.5"
}

repositories {
	mavenCentral()
	jcenter()
}

ext.antlr = [
        outputDirectory: 'src/generated/antlr/',
        destPackage: 'at.rknoll.parser.vhdl'
]

generateGrammarSource {
    outputDirectory = file(antlr.outputDirectory + antlr.destPackage.replaceAll('\\.', '/'))
    arguments += ["-package", antlr.destPackage]
}

compileJava.source file(antlr.outputDirectory)

idea {
    module {
        sourceDirs += file(antlr.outputDirectory)
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

javadoc {
    exclude "**/ui/**"
}

uploadArchives {
    repositories {
        ivy {
            credentials {
                username = System.getenv('IVY_USERNAME')
                password = System.getenv('IVY_PASSWORD')
            }
            url System.getenv('IVY_HOST')
            layout 'maven'
        }
	}
}

if (System.getenv('GRADLE_PUBLISH_KEY') != null) System.setProperty("gradle.publish.key", System.getenv('GRADLE_PUBLISH_KEY'))
if (System.getenv('GRADLE_PUBLISH_SECRET') != null) System.setProperty("gradle.publish.secret", System.getenv('GRADLE_PUBLISH_SECRET'))

pluginBundle {
    website = 'http://gradle.rknoll.at/'
    vcsUrl = 'http://git.rknoll.at/gradle'
    description = 'Gradle Plugins from RKnoll'
    tags = ['rknoll']

    plugins {
        hardware {
            id = 'at.rknoll.gradle.hardware'
            displayName = 'Gradle Hardware plugin for VHDL, Verilog and PSHDL'
            tags = ['hardware', 'vhdl', 'verilog', 'pshdl', 'fpga']
        }
        modelsimaltera {
            id = 'at.rknoll.gradle.modelsimaltera'
            displayName = 'Gradle Hardware plugin for Modelsim Altera'
            tags = ['hardware', 'vhdl', 'verilog', 'pshdl', 'fpga', 'altera', 'modelsim']
        }
        questasim {
            id = 'at.rknoll.gradle.questasim'
            displayName = 'Gradle Hardware plugin for Questasim'
            tags = ['hardware', 'vhdl', 'verilog', 'pshdl', 'fpga', 'questasim']
        }
        quartus {
            id = 'at.rknoll.gradle.quartus'
            displayName = 'Gradle Hardware plugin for Altera Quartus'
            tags = ['hardware', 'vhdl', 'verilog', 'pshdl', 'fpga', 'altera', 'quartus']
        }
    }
}
